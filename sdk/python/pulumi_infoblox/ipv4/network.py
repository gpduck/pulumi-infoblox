# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['NetworkArgs', 'Network']

@pulumi.input_type
class NetworkArgs:
    def __init__(__self__, *,
                 allocate_prefix_len: Optional[pulumi.Input[int]] = None,
                 cidr: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 ext_attrs: Optional[pulumi.Input[str]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 network_view: Optional[pulumi.Input[str]] = None,
                 parent_cidr: Optional[pulumi.Input[str]] = None,
                 reserve_ip: Optional[pulumi.Input[int]] = None,
                 reserve_ipv6: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a Network resource.
        :param pulumi.Input[int] allocate_prefix_len: Set the parameter's value > 0 to allocate next available network with corresponding prefix length from the network
               container defined by 'parent_cidr'
        :param pulumi.Input[str] cidr: The network block in cidr format.
        :param pulumi.Input[str] comment: A string describing the network
        :param pulumi.Input[str] ext_attrs: The Extensible attributes of the Network, as a map in JSON format
        :param pulumi.Input[str] gateway: Gateway's IP address of the network. By default, the first IP address is set as gateway address; if the value is 'none'
               then the network has no gateway.
        :param pulumi.Input[str] network_view: Network view name available in NIOS Server.
        :param pulumi.Input[str] parent_cidr: The parent network container block in cidr format to allocate from.
        :param pulumi.Input[int] reserve_ip: The number of IP's you want to reserve in IPv4 Network.
        :param pulumi.Input[int] reserve_ipv6: The number of IP's you want to reserve in IPv6 Network
        """
        if allocate_prefix_len is not None:
            pulumi.set(__self__, "allocate_prefix_len", allocate_prefix_len)
        if cidr is not None:
            pulumi.set(__self__, "cidr", cidr)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if ext_attrs is not None:
            pulumi.set(__self__, "ext_attrs", ext_attrs)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if network_view is not None:
            pulumi.set(__self__, "network_view", network_view)
        if parent_cidr is not None:
            pulumi.set(__self__, "parent_cidr", parent_cidr)
        if reserve_ip is not None:
            pulumi.set(__self__, "reserve_ip", reserve_ip)
        if reserve_ipv6 is not None:
            pulumi.set(__self__, "reserve_ipv6", reserve_ipv6)

    @property
    @pulumi.getter(name="allocatePrefixLen")
    def allocate_prefix_len(self) -> Optional[pulumi.Input[int]]:
        """
        Set the parameter's value > 0 to allocate next available network with corresponding prefix length from the network
        container defined by 'parent_cidr'
        """
        return pulumi.get(self, "allocate_prefix_len")

    @allocate_prefix_len.setter
    def allocate_prefix_len(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "allocate_prefix_len", value)

    @property
    @pulumi.getter
    def cidr(self) -> Optional[pulumi.Input[str]]:
        """
        The network block in cidr format.
        """
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cidr", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        A string describing the network
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="extAttrs")
    def ext_attrs(self) -> Optional[pulumi.Input[str]]:
        """
        The Extensible attributes of the Network, as a map in JSON format
        """
        return pulumi.get(self, "ext_attrs")

    @ext_attrs.setter
    def ext_attrs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ext_attrs", value)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[str]]:
        """
        Gateway's IP address of the network. By default, the first IP address is set as gateway address; if the value is 'none'
        then the network has no gateway.
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter(name="networkView")
    def network_view(self) -> Optional[pulumi.Input[str]]:
        """
        Network view name available in NIOS Server.
        """
        return pulumi.get(self, "network_view")

    @network_view.setter
    def network_view(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_view", value)

    @property
    @pulumi.getter(name="parentCidr")
    def parent_cidr(self) -> Optional[pulumi.Input[str]]:
        """
        The parent network container block in cidr format to allocate from.
        """
        return pulumi.get(self, "parent_cidr")

    @parent_cidr.setter
    def parent_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent_cidr", value)

    @property
    @pulumi.getter(name="reserveIp")
    def reserve_ip(self) -> Optional[pulumi.Input[int]]:
        """
        The number of IP's you want to reserve in IPv4 Network.
        """
        return pulumi.get(self, "reserve_ip")

    @reserve_ip.setter
    def reserve_ip(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "reserve_ip", value)

    @property
    @pulumi.getter(name="reserveIpv6")
    def reserve_ipv6(self) -> Optional[pulumi.Input[int]]:
        """
        The number of IP's you want to reserve in IPv6 Network
        """
        return pulumi.get(self, "reserve_ipv6")

    @reserve_ipv6.setter
    def reserve_ipv6(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "reserve_ipv6", value)


@pulumi.input_type
class _NetworkState:
    def __init__(__self__, *,
                 allocate_prefix_len: Optional[pulumi.Input[int]] = None,
                 cidr: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 ext_attrs: Optional[pulumi.Input[str]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 network_view: Optional[pulumi.Input[str]] = None,
                 parent_cidr: Optional[pulumi.Input[str]] = None,
                 reserve_ip: Optional[pulumi.Input[int]] = None,
                 reserve_ipv6: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Network resources.
        :param pulumi.Input[int] allocate_prefix_len: Set the parameter's value > 0 to allocate next available network with corresponding prefix length from the network
               container defined by 'parent_cidr'
        :param pulumi.Input[str] cidr: The network block in cidr format.
        :param pulumi.Input[str] comment: A string describing the network
        :param pulumi.Input[str] ext_attrs: The Extensible attributes of the Network, as a map in JSON format
        :param pulumi.Input[str] gateway: Gateway's IP address of the network. By default, the first IP address is set as gateway address; if the value is 'none'
               then the network has no gateway.
        :param pulumi.Input[str] network_view: Network view name available in NIOS Server.
        :param pulumi.Input[str] parent_cidr: The parent network container block in cidr format to allocate from.
        :param pulumi.Input[int] reserve_ip: The number of IP's you want to reserve in IPv4 Network.
        :param pulumi.Input[int] reserve_ipv6: The number of IP's you want to reserve in IPv6 Network
        """
        if allocate_prefix_len is not None:
            pulumi.set(__self__, "allocate_prefix_len", allocate_prefix_len)
        if cidr is not None:
            pulumi.set(__self__, "cidr", cidr)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if ext_attrs is not None:
            pulumi.set(__self__, "ext_attrs", ext_attrs)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if network_view is not None:
            pulumi.set(__self__, "network_view", network_view)
        if parent_cidr is not None:
            pulumi.set(__self__, "parent_cidr", parent_cidr)
        if reserve_ip is not None:
            pulumi.set(__self__, "reserve_ip", reserve_ip)
        if reserve_ipv6 is not None:
            pulumi.set(__self__, "reserve_ipv6", reserve_ipv6)

    @property
    @pulumi.getter(name="allocatePrefixLen")
    def allocate_prefix_len(self) -> Optional[pulumi.Input[int]]:
        """
        Set the parameter's value > 0 to allocate next available network with corresponding prefix length from the network
        container defined by 'parent_cidr'
        """
        return pulumi.get(self, "allocate_prefix_len")

    @allocate_prefix_len.setter
    def allocate_prefix_len(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "allocate_prefix_len", value)

    @property
    @pulumi.getter
    def cidr(self) -> Optional[pulumi.Input[str]]:
        """
        The network block in cidr format.
        """
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cidr", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        A string describing the network
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="extAttrs")
    def ext_attrs(self) -> Optional[pulumi.Input[str]]:
        """
        The Extensible attributes of the Network, as a map in JSON format
        """
        return pulumi.get(self, "ext_attrs")

    @ext_attrs.setter
    def ext_attrs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ext_attrs", value)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[str]]:
        """
        Gateway's IP address of the network. By default, the first IP address is set as gateway address; if the value is 'none'
        then the network has no gateway.
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter(name="networkView")
    def network_view(self) -> Optional[pulumi.Input[str]]:
        """
        Network view name available in NIOS Server.
        """
        return pulumi.get(self, "network_view")

    @network_view.setter
    def network_view(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_view", value)

    @property
    @pulumi.getter(name="parentCidr")
    def parent_cidr(self) -> Optional[pulumi.Input[str]]:
        """
        The parent network container block in cidr format to allocate from.
        """
        return pulumi.get(self, "parent_cidr")

    @parent_cidr.setter
    def parent_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent_cidr", value)

    @property
    @pulumi.getter(name="reserveIp")
    def reserve_ip(self) -> Optional[pulumi.Input[int]]:
        """
        The number of IP's you want to reserve in IPv4 Network.
        """
        return pulumi.get(self, "reserve_ip")

    @reserve_ip.setter
    def reserve_ip(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "reserve_ip", value)

    @property
    @pulumi.getter(name="reserveIpv6")
    def reserve_ipv6(self) -> Optional[pulumi.Input[int]]:
        """
        The number of IP's you want to reserve in IPv6 Network
        """
        return pulumi.get(self, "reserve_ipv6")

    @reserve_ipv6.setter
    def reserve_ipv6(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "reserve_ipv6", value)


class Network(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allocate_prefix_len: Optional[pulumi.Input[int]] = None,
                 cidr: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 ext_attrs: Optional[pulumi.Input[str]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 network_view: Optional[pulumi.Input[str]] = None,
                 parent_cidr: Optional[pulumi.Input[str]] = None,
                 reserve_ip: Optional[pulumi.Input[int]] = None,
                 reserve_ipv6: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Create a Network resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] allocate_prefix_len: Set the parameter's value > 0 to allocate next available network with corresponding prefix length from the network
               container defined by 'parent_cidr'
        :param pulumi.Input[str] cidr: The network block in cidr format.
        :param pulumi.Input[str] comment: A string describing the network
        :param pulumi.Input[str] ext_attrs: The Extensible attributes of the Network, as a map in JSON format
        :param pulumi.Input[str] gateway: Gateway's IP address of the network. By default, the first IP address is set as gateway address; if the value is 'none'
               then the network has no gateway.
        :param pulumi.Input[str] network_view: Network view name available in NIOS Server.
        :param pulumi.Input[str] parent_cidr: The parent network container block in cidr format to allocate from.
        :param pulumi.Input[int] reserve_ip: The number of IP's you want to reserve in IPv4 Network.
        :param pulumi.Input[int] reserve_ipv6: The number of IP's you want to reserve in IPv6 Network
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[NetworkArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Network resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param NetworkArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NetworkArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allocate_prefix_len: Optional[pulumi.Input[int]] = None,
                 cidr: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 ext_attrs: Optional[pulumi.Input[str]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 network_view: Optional[pulumi.Input[str]] = None,
                 parent_cidr: Optional[pulumi.Input[str]] = None,
                 reserve_ip: Optional[pulumi.Input[int]] = None,
                 reserve_ipv6: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NetworkArgs.__new__(NetworkArgs)

            __props__.__dict__["allocate_prefix_len"] = allocate_prefix_len
            __props__.__dict__["cidr"] = cidr
            __props__.__dict__["comment"] = comment
            __props__.__dict__["ext_attrs"] = ext_attrs
            __props__.__dict__["gateway"] = gateway
            __props__.__dict__["network_view"] = network_view
            __props__.__dict__["parent_cidr"] = parent_cidr
            __props__.__dict__["reserve_ip"] = reserve_ip
            __props__.__dict__["reserve_ipv6"] = reserve_ipv6
        super(Network, __self__).__init__(
            'infoblox:ipv4/network:Network',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allocate_prefix_len: Optional[pulumi.Input[int]] = None,
            cidr: Optional[pulumi.Input[str]] = None,
            comment: Optional[pulumi.Input[str]] = None,
            ext_attrs: Optional[pulumi.Input[str]] = None,
            gateway: Optional[pulumi.Input[str]] = None,
            network_view: Optional[pulumi.Input[str]] = None,
            parent_cidr: Optional[pulumi.Input[str]] = None,
            reserve_ip: Optional[pulumi.Input[int]] = None,
            reserve_ipv6: Optional[pulumi.Input[int]] = None) -> 'Network':
        """
        Get an existing Network resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] allocate_prefix_len: Set the parameter's value > 0 to allocate next available network with corresponding prefix length from the network
               container defined by 'parent_cidr'
        :param pulumi.Input[str] cidr: The network block in cidr format.
        :param pulumi.Input[str] comment: A string describing the network
        :param pulumi.Input[str] ext_attrs: The Extensible attributes of the Network, as a map in JSON format
        :param pulumi.Input[str] gateway: Gateway's IP address of the network. By default, the first IP address is set as gateway address; if the value is 'none'
               then the network has no gateway.
        :param pulumi.Input[str] network_view: Network view name available in NIOS Server.
        :param pulumi.Input[str] parent_cidr: The parent network container block in cidr format to allocate from.
        :param pulumi.Input[int] reserve_ip: The number of IP's you want to reserve in IPv4 Network.
        :param pulumi.Input[int] reserve_ipv6: The number of IP's you want to reserve in IPv6 Network
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NetworkState.__new__(_NetworkState)

        __props__.__dict__["allocate_prefix_len"] = allocate_prefix_len
        __props__.__dict__["cidr"] = cidr
        __props__.__dict__["comment"] = comment
        __props__.__dict__["ext_attrs"] = ext_attrs
        __props__.__dict__["gateway"] = gateway
        __props__.__dict__["network_view"] = network_view
        __props__.__dict__["parent_cidr"] = parent_cidr
        __props__.__dict__["reserve_ip"] = reserve_ip
        __props__.__dict__["reserve_ipv6"] = reserve_ipv6
        return Network(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="allocatePrefixLen")
    def allocate_prefix_len(self) -> pulumi.Output[Optional[int]]:
        """
        Set the parameter's value > 0 to allocate next available network with corresponding prefix length from the network
        container defined by 'parent_cidr'
        """
        return pulumi.get(self, "allocate_prefix_len")

    @property
    @pulumi.getter
    def cidr(self) -> pulumi.Output[str]:
        """
        The network block in cidr format.
        """
        return pulumi.get(self, "cidr")

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        """
        A string describing the network
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="extAttrs")
    def ext_attrs(self) -> pulumi.Output[Optional[str]]:
        """
        The Extensible attributes of the Network, as a map in JSON format
        """
        return pulumi.get(self, "ext_attrs")

    @property
    @pulumi.getter
    def gateway(self) -> pulumi.Output[str]:
        """
        Gateway's IP address of the network. By default, the first IP address is set as gateway address; if the value is 'none'
        then the network has no gateway.
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter(name="networkView")
    def network_view(self) -> pulumi.Output[Optional[str]]:
        """
        Network view name available in NIOS Server.
        """
        return pulumi.get(self, "network_view")

    @property
    @pulumi.getter(name="parentCidr")
    def parent_cidr(self) -> pulumi.Output[Optional[str]]:
        """
        The parent network container block in cidr format to allocate from.
        """
        return pulumi.get(self, "parent_cidr")

    @property
    @pulumi.getter(name="reserveIp")
    def reserve_ip(self) -> pulumi.Output[int]:
        """
        The number of IP's you want to reserve in IPv4 Network.
        """
        return pulumi.get(self, "reserve_ip")

    @property
    @pulumi.getter(name="reserveIpv6")
    def reserve_ipv6(self) -> pulumi.Output[int]:
        """
        The number of IP's you want to reserve in IPv6 Network
        """
        return pulumi.get(self, "reserve_ipv6")

