# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['NetworkContainerArgs', 'NetworkContainer']

@pulumi.input_type
class NetworkContainerArgs:
    def __init__(__self__, *,
                 cidr: pulumi.Input[str],
                 comment: Optional[pulumi.Input[str]] = None,
                 ext_attrs: Optional[pulumi.Input[str]] = None,
                 network_view: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a NetworkContainer resource.
        :param pulumi.Input[str] cidr: The network container's address, in CIDR format.
        :param pulumi.Input[str] comment: A description of the network container.
        :param pulumi.Input[str] ext_attrs: The Extensible attributes of the network container to be added/updated, as a map in JSON format
        :param pulumi.Input[str] network_view: The name of network view for the network container.
        """
        pulumi.set(__self__, "cidr", cidr)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if ext_attrs is not None:
            pulumi.set(__self__, "ext_attrs", ext_attrs)
        if network_view is not None:
            pulumi.set(__self__, "network_view", network_view)

    @property
    @pulumi.getter
    def cidr(self) -> pulumi.Input[str]:
        """
        The network container's address, in CIDR format.
        """
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: pulumi.Input[str]):
        pulumi.set(self, "cidr", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        A description of the network container.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="extAttrs")
    def ext_attrs(self) -> Optional[pulumi.Input[str]]:
        """
        The Extensible attributes of the network container to be added/updated, as a map in JSON format
        """
        return pulumi.get(self, "ext_attrs")

    @ext_attrs.setter
    def ext_attrs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ext_attrs", value)

    @property
    @pulumi.getter(name="networkView")
    def network_view(self) -> Optional[pulumi.Input[str]]:
        """
        The name of network view for the network container.
        """
        return pulumi.get(self, "network_view")

    @network_view.setter
    def network_view(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_view", value)


@pulumi.input_type
class _NetworkContainerState:
    def __init__(__self__, *,
                 cidr: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 ext_attrs: Optional[pulumi.Input[str]] = None,
                 network_view: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering NetworkContainer resources.
        :param pulumi.Input[str] cidr: The network container's address, in CIDR format.
        :param pulumi.Input[str] comment: A description of the network container.
        :param pulumi.Input[str] ext_attrs: The Extensible attributes of the network container to be added/updated, as a map in JSON format
        :param pulumi.Input[str] network_view: The name of network view for the network container.
        """
        if cidr is not None:
            pulumi.set(__self__, "cidr", cidr)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if ext_attrs is not None:
            pulumi.set(__self__, "ext_attrs", ext_attrs)
        if network_view is not None:
            pulumi.set(__self__, "network_view", network_view)

    @property
    @pulumi.getter
    def cidr(self) -> Optional[pulumi.Input[str]]:
        """
        The network container's address, in CIDR format.
        """
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cidr", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        A description of the network container.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="extAttrs")
    def ext_attrs(self) -> Optional[pulumi.Input[str]]:
        """
        The Extensible attributes of the network container to be added/updated, as a map in JSON format
        """
        return pulumi.get(self, "ext_attrs")

    @ext_attrs.setter
    def ext_attrs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ext_attrs", value)

    @property
    @pulumi.getter(name="networkView")
    def network_view(self) -> Optional[pulumi.Input[str]]:
        """
        The name of network view for the network container.
        """
        return pulumi.get(self, "network_view")

    @network_view.setter
    def network_view(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_view", value)


class NetworkContainer(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cidr: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 ext_attrs: Optional[pulumi.Input[str]] = None,
                 network_view: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a NetworkContainer resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cidr: The network container's address, in CIDR format.
        :param pulumi.Input[str] comment: A description of the network container.
        :param pulumi.Input[str] ext_attrs: The Extensible attributes of the network container to be added/updated, as a map in JSON format
        :param pulumi.Input[str] network_view: The name of network view for the network container.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NetworkContainerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a NetworkContainer resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param NetworkContainerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NetworkContainerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cidr: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 ext_attrs: Optional[pulumi.Input[str]] = None,
                 network_view: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NetworkContainerArgs.__new__(NetworkContainerArgs)

            if cidr is None and not opts.urn:
                raise TypeError("Missing required property 'cidr'")
            __props__.__dict__["cidr"] = cidr
            __props__.__dict__["comment"] = comment
            __props__.__dict__["ext_attrs"] = ext_attrs
            __props__.__dict__["network_view"] = network_view
        super(NetworkContainer, __self__).__init__(
            'infoblox:ipv4/networkContainer:NetworkContainer',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cidr: Optional[pulumi.Input[str]] = None,
            comment: Optional[pulumi.Input[str]] = None,
            ext_attrs: Optional[pulumi.Input[str]] = None,
            network_view: Optional[pulumi.Input[str]] = None) -> 'NetworkContainer':
        """
        Get an existing NetworkContainer resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cidr: The network container's address, in CIDR format.
        :param pulumi.Input[str] comment: A description of the network container.
        :param pulumi.Input[str] ext_attrs: The Extensible attributes of the network container to be added/updated, as a map in JSON format
        :param pulumi.Input[str] network_view: The name of network view for the network container.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NetworkContainerState.__new__(_NetworkContainerState)

        __props__.__dict__["cidr"] = cidr
        __props__.__dict__["comment"] = comment
        __props__.__dict__["ext_attrs"] = ext_attrs
        __props__.__dict__["network_view"] = network_view
        return NetworkContainer(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def cidr(self) -> pulumi.Output[str]:
        """
        The network container's address, in CIDR format.
        """
        return pulumi.get(self, "cidr")

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        """
        A description of the network container.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="extAttrs")
    def ext_attrs(self) -> pulumi.Output[Optional[str]]:
        """
        The Extensible attributes of the network container to be added/updated, as a map in JSON format
        """
        return pulumi.get(self, "ext_attrs")

    @property
    @pulumi.getter(name="networkView")
    def network_view(self) -> pulumi.Output[Optional[str]]:
        """
        The name of network view for the network container.
        """
        return pulumi.get(self, "network_view")

