# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ProviderArgs', 'Provider']

@pulumi.input_type
class ProviderArgs:
    def __init__(__self__, *,
                 server: pulumi.Input[str],
                 username: pulumi.Input[str],
                 connect_timeout: Optional[pulumi.Input[int]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 pool_connections: Optional[pulumi.Input[int]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 sslmode: Optional[pulumi.Input[bool]] = None,
                 wapi_version: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Provider resource.
        :param pulumi.Input[str] server: Infoblox server IP address.
        :param pulumi.Input[str] username: User to authenticate with Infoblox server.
        :param pulumi.Input[int] connect_timeout: Maximum wait for connection, in seconds. Zero or not specified means wait indefinitely.
        :param pulumi.Input[str] password: Password to authenticate with Infoblox server.
        :param pulumi.Input[int] pool_connections: Maximum number of connections to establish to the Infoblox server. Zero means unlimited.
        :param pulumi.Input[str] port: Port number used for connection for Infoblox Server.
        :param pulumi.Input[bool] sslmode: If set, Infoblox client will permit unverifiable SSL certificates.
        :param pulumi.Input[str] wapi_version: WAPI Version of Infoblox server defaults to v2.7.
        """
        pulumi.set(__self__, "server", server)
        pulumi.set(__self__, "username", username)
        if connect_timeout is not None:
            pulumi.set(__self__, "connect_timeout", connect_timeout)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if pool_connections is not None:
            pulumi.set(__self__, "pool_connections", pool_connections)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if sslmode is not None:
            pulumi.set(__self__, "sslmode", sslmode)
        if wapi_version is not None:
            pulumi.set(__self__, "wapi_version", wapi_version)

    @property
    @pulumi.getter
    def server(self) -> pulumi.Input[str]:
        """
        Infoblox server IP address.
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: pulumi.Input[str]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        User to authenticate with Infoblox server.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="connectTimeout")
    def connect_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum wait for connection, in seconds. Zero or not specified means wait indefinitely.
        """
        return pulumi.get(self, "connect_timeout")

    @connect_timeout.setter
    def connect_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "connect_timeout", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password to authenticate with Infoblox server.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="poolConnections")
    def pool_connections(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of connections to establish to the Infoblox server. Zero means unlimited.
        """
        return pulumi.get(self, "pool_connections")

    @pool_connections.setter
    def pool_connections(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pool_connections", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        """
        Port number used for connection for Infoblox Server.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def sslmode(self) -> Optional[pulumi.Input[bool]]:
        """
        If set, Infoblox client will permit unverifiable SSL certificates.
        """
        return pulumi.get(self, "sslmode")

    @sslmode.setter
    def sslmode(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sslmode", value)

    @property
    @pulumi.getter(name="wapiVersion")
    def wapi_version(self) -> Optional[pulumi.Input[str]]:
        """
        WAPI Version of Infoblox server defaults to v2.7.
        """
        return pulumi.get(self, "wapi_version")

    @wapi_version.setter
    def wapi_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wapi_version", value)


class Provider(pulumi.ProviderResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connect_timeout: Optional[pulumi.Input[int]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 pool_connections: Optional[pulumi.Input[int]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 sslmode: Optional[pulumi.Input[bool]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 wapi_version: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        The provider type for the infoblox package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] connect_timeout: Maximum wait for connection, in seconds. Zero or not specified means wait indefinitely.
        :param pulumi.Input[str] password: Password to authenticate with Infoblox server.
        :param pulumi.Input[int] pool_connections: Maximum number of connections to establish to the Infoblox server. Zero means unlimited.
        :param pulumi.Input[str] port: Port number used for connection for Infoblox Server.
        :param pulumi.Input[str] server: Infoblox server IP address.
        :param pulumi.Input[bool] sslmode: If set, Infoblox client will permit unverifiable SSL certificates.
        :param pulumi.Input[str] username: User to authenticate with Infoblox server.
        :param pulumi.Input[str] wapi_version: WAPI Version of Infoblox server defaults to v2.7.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ProviderArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The provider type for the infoblox package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param ProviderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProviderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connect_timeout: Optional[pulumi.Input[int]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 pool_connections: Optional[pulumi.Input[int]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 sslmode: Optional[pulumi.Input[bool]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 wapi_version: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProviderArgs.__new__(ProviderArgs)

            __props__.__dict__["connect_timeout"] = pulumi.Output.from_input(connect_timeout).apply(pulumi.runtime.to_json) if connect_timeout is not None else None
            __props__.__dict__["password"] = password
            __props__.__dict__["pool_connections"] = pulumi.Output.from_input(pool_connections).apply(pulumi.runtime.to_json) if pool_connections is not None else None
            __props__.__dict__["port"] = port
            if server is None and not opts.urn:
                raise TypeError("Missing required property 'server'")
            __props__.__dict__["server"] = server
            __props__.__dict__["sslmode"] = pulumi.Output.from_input(sslmode).apply(pulumi.runtime.to_json) if sslmode is not None else None
            if username is None and not opts.urn:
                raise TypeError("Missing required property 'username'")
            __props__.__dict__["username"] = username
            __props__.__dict__["wapi_version"] = wapi_version
        super(Provider, __self__).__init__(
            'infoblox',
            resource_name,
            __props__,
            opts)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[str]]:
        """
        Password to authenticate with Infoblox server.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> pulumi.Output[Optional[str]]:
        """
        Port number used for connection for Infoblox Server.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def server(self) -> pulumi.Output[str]:
        """
        Infoblox server IP address.
        """
        return pulumi.get(self, "server")

    @property
    @pulumi.getter
    def username(self) -> pulumi.Output[str]:
        """
        User to authenticate with Infoblox server.
        """
        return pulumi.get(self, "username")

    @property
    @pulumi.getter(name="wapiVersion")
    def wapi_version(self) -> pulumi.Output[Optional[str]]:
        """
        WAPI Version of Infoblox server defaults to v2.7.
        """
        return pulumi.get(self, "wapi_version")

